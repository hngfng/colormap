/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.colormap.point;

import java.awt.Color;
import java.awt.Component;
import java.awt.Paint;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import ui.colormap.ColorMap;
import ui.colormap.ColorMapBean;
import ui.colormap.panel.PlattePanel;
import ui.colormap.MapType;
import ui.file.color.Gradient;
import ui.file.color.Util;

/**
 *
 * @author allanlee
 */
public class PointPanel extends PlattePanel {

    /**
     * Creates new form PointPanel
     *
     * @param mp
     */
    public PointPanel(ColorMap mp) {
        super(mp);
        if (mp == null || mp.getMapType().compareTo(MapType.Point)!=0) {
            clrMp = new PointMap();
            clrMp.setMapType(MapType.Point);
        }
        initComponents();
        clrTable.setModel(new PointModel());
        clrTable.setDefaultRenderer(Object.class, new CellRender());
        colorPanel1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int row = clrTable.getSelectedRow();
                int column = clrTable.getSelectedColumn();
                if (row == 1 && column != 0) {
                    clrMp.getBeans().get(column - 1).setPt((Paint) e.getSource());
                    clrMp.getBeans().get(column - 1).setType(-1);
                    ((AbstractTableModel) clrTable.getModel()).fireTableDataChanged();
                    clrTable.setRowSelectionInterval(row, row);
                    clrTable.setColumnSelectionInterval(column, column);
                }
            }
        });
    }

    @Override
    public JComponent[] getButtons() {
        return new JButton[]{addBtn, delBtn, autoBtn, gradentBtn};
    }

    public void save(String path) {
        clrMp.save(path);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        autoBtn = new javax.swing.JButton();
        gradentBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clrTable = new javax.swing.JTable();
        colorPanel1 = new ui.colormap.panel.ColorPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        intervalSpn = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();

        addBtn.setText("添加");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        delBtn.setText("删除");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        autoBtn.setText("自动");
        autoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoBtnActionPerformed(evt);
            }
        });

        gradentBtn.setText("梯度");
        gradentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradentBtnActionPerformed(evt);
            }
        });

        clrTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        clrTable.setRowHeight(30);
        jScrollPane1.setViewportView(clrTable);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "总体"));

        jLabel39.setText("上边界：");

        jLabel40.setText("下边界：");

        jLabel41.setText("间隔数：");

        jLabel42.setText("小数位数：");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinner1.setValue(clrMp.getStart());
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        jSpinner2.setValue(clrMp.getEnd());
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        intervalSpn.setModel(new javax.swing.SpinnerNumberModel());
        intervalSpn.setValue(clrMp.getBeans().size());
        intervalSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                intervalSpnStateChanged(evt);
            }
        });

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));
        jSpinner4.setValue(clrMp.getTail());

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel40, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel41, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(jSpinner2)
                    .addComponent(intervalSpn)
                    .addComponent(jSpinner1)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41)
                    .addComponent(intervalSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        double val = Double.parseDouble(jSpinner1.getValue().toString());
        clrMp.setStart(val);
        calculate();
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        double val = Double.parseDouble(jSpinner2.getValue().toString());
        clrMp.setEnd(val);
        calculate();
    }//GEN-LAST:event_jSpinner2StateChanged

    private void intervalSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_intervalSpnStateChanged
        calculate();
    }//GEN-LAST:event_intervalSpnStateChanged

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        int size = clrMp.getBeans().size();
        intervalSpn.setValue(size + 1);
        calculate();
    }//GEN-LAST:event_addBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        intervalSpn.setValue(clrMp.getBeans().size() - 1);
        calculate();
    }//GEN-LAST:event_delBtnActionPerformed

    private void gradentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradentBtnActionPerformed
        intervalsGradient();
        ((AbstractTableModel) clrTable.getModel()).fireTableDataChanged();
    }//GEN-LAST:event_gradentBtnActionPerformed

    private void autoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoBtnActionPerformed
        for (int i = 0; i < clrMp.getBeans().size(); i++) {
            ColorMapBean get = clrMp.getBeans().get(i);
            get.setPt(Util.getColors()[i]);
        }
        ((AbstractTableModel) clrTable.getModel()).fireTableDataChanged();
    }//GEN-LAST:event_autoBtnActionPerformed
    public void intervalsGradient() {
        int[] sr = clrTable.getSelectedColumns();
        //循环次数
        if (clrMp.getBeans().size() <= 2) {
            return;
        }
        int[] idxs = new int[2];
        //无选择
        if (sr.length == 0) {
            idxs[0] = 0;
            idxs[idxs.length - 1] = clrMp.getBeans().size() - 1;
        } else if (sr.length == 1) {//选择为一个
            int id = sr[0] - 1;
            if (id == 0 || id == clrMp.getBeans().size() - 1) {
                idxs[0] = 0;
                idxs[idxs.length - 1] = clrMp.getBeans().size() - 1;
            } else {
                idxs = new int[3];
                idxs[0] = 0;
                idxs[1] = id;
                idxs[idxs.length - 1] = clrMp.getBeans().size() - 1;
            }
        } else {
            idxs = new int[sr.length];
            for (int i = 0; i < idxs.length; i++) {
                int id = sr[i] - 1;
                idxs[i] = id;
            }
        }
        Arrays.sort(idxs);
        for (int i = 0; i < idxs.length - 1; i++) {
            ColorMapBean sp = clrMp.getBeans().get(idxs[i]);
            ColorMapBean sp1 = clrMp.getBeans().get(idxs[i + 1]);
            Paint a = sp.getPt();
            Paint a1 = sp1.getPt();
            if (a instanceof Color) {
                Color color = (Color) a;
                if (a1 instanceof Color) {
                    Color color1 = (Color) a1;
                    int cnt = Math.abs(idxs[i] - idxs[i + 1]);
                    Color[] clrs = Gradient.createGradient(color, color1, cnt);
                    for (int j = 0; j < cnt; j++) {
                        ColorMapBean beans2 = clrMp.getBeans().get(j + idxs[i]);
                        if (beans2.getPt() instanceof Color) {
                            beans2.setPt(clrs[j]);
                        }
                    }
                }
            }
        }
    }

    private void calculate() {
        int cnt = Integer.parseInt(intervalSpn.getValue().toString());
        int size = clrMp.getBeans().size();
        for (int i = 0; i < Math.abs(cnt - size); i++) {
            if (cnt > size) {
                ColorMapBean bean = new ColorMapBean();
                bean.setPt(Util.getColors()[size]);
                bean.setText("");
                bean.setType(-1);
                clrMp.getBeans().add(bean);
                DefaultTableColumnModel cm = (DefaultTableColumnModel) clrTable.getColumnModel();
                cm.addColumn(new TableColumn(clrMp.getBeans().size()));
            } else if (cnt < size) {
                int scm = clrTable.getSelectedColumn();
                clrMp.getBeans().remove(scm <= 0 ? clrMp.getBeans().size() - 1 : scm - 1);
                DefaultTableColumnModel cm = (DefaultTableColumnModel) clrTable.getColumnModel();
                TableColumn cmn = cm.getColumn(cnt);
                cm.removeColumn(cmn);
            }
        }
        double step = cnt == 1 ? cnt : (clrMp.getEnd() - clrMp.getStart()) / (cnt - 1);
        for (int i = 0; i < clrMp.getBeans().size(); i++) {
            ColorMapBean bean = clrMp.getBeans().get(i);
            bean.setMin(clrMp.getStart() + i * step);
            bean.setMax(clrMp.getStart() + i * step);
        }
        ((AbstractTableModel) clrTable.getModel()).fireTableStructureChanged();
        ((AbstractTableModel) clrTable.getModel()).fireTableDataChanged();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton autoBtn;
    private javax.swing.JTable clrTable;
    private ui.colormap.panel.ColorPanel colorPanel1;
    private javax.swing.JButton delBtn;
    private javax.swing.JButton gradentBtn;
    private javax.swing.JSpinner intervalSpn;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner4;
    // End of variables declaration//GEN-END:variables

    private class PointModel extends AbstractTableModel {

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex != 0 && rowIndex != 2;
        }

        @Override
        public int getRowCount() {
            return 2;
        }

        @Override
        public String getColumnName(int column) {
            return "    ";
        }

        @Override
        public int getColumnCount() {
            return clrMp.getBeans().size() + 1;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            boolean ff = columnIndex == 0;
            ColorMapBean bean = ff ? null : clrMp.getBeans().get(columnIndex - 1);
            switch (rowIndex) {
                case 0:
                    return ff ? "点值" : bean.getMin();
                case 1:
                    return ff ? "颜色" : bean.getPt();
            }
            return null;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            boolean ff = columnIndex == 0;
            if (ff) {
                return;
            }
            //current
            ColorMapBean bean = clrMp.getBeans().get(columnIndex - 1);
            switch (rowIndex) {
                case 0:
                    double v = Double.parseDouble(aValue.toString());
                    if (columnIndex == 1) {
                        if (clrMp.getBeans().size() == 1) {
                            if (v < clrMp.getStart()) {
                                clrMp.setStart(v);
                                jSpinner1.setValue(v);
                            } else if (v > clrMp.getEnd()) {
                                clrMp.setEnd(v);
                                jSpinner2.setValue(v);
                            }
                        }
                    } else if (columnIndex == clrMp.getBeans().size()) {
                        //pre
                        ColorMapBean bean0 = clrMp.getBeans().get(columnIndex - 2);
                        v = v < bean0.getMin() ? bean.getMin() : v;
                        if (v > clrMp.getEnd()) {
                            clrMp.setEnd(v);
                            jSpinner2.setValue(v);
                        }
                        bean.setMin(v);
                        bean.setMax(v);
                    } else {
                        //next
                        ColorMapBean bean1 = clrMp.getBeans().get(columnIndex);
                        v = v > bean1.getMax() ? bean.getMin() : v;
                        bean.setMin(v);
                        bean.setMax(v);
                        //pre
                        ColorMapBean bean0 = clrMp.getBeans().get(columnIndex - 2);
                        v = v < bean0.getMin() ? bean.getMin() : v;
                        v = v > bean.getMax() ? bean.getMin() : v;
                        bean.setMin(v);
                        bean0.setMax(v);
                    }
                    fireTableDataChanged();
                    break;
                case 1:
                    bean.setPt((Paint) aValue);
                    break;
            }
        }
    }

    private class CellRender implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JComponent cmp;
            if (row == 0 && column != 0) {
                JTextField ff = new JTextField(value.toString());
                cmp = ff;
            } else if (row == 1 && column != 0) {
                JLabel lbl = new JLabel();
                lbl.setOpaque(true);
                lbl.setBackground((Color) value);
                cmp = lbl;
            } else {
                JLabel lbl = new JLabel();
                lbl.setText(value.toString());
                cmp = lbl;
            }
            if (isSelected && hasFocus && column != 0) {
                cmp.setBorder(new LineBorder(Color.BLUE, 2));
            }
            return cmp;
        }
    }
}
